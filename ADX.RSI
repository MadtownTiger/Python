import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
from math import floor
from termcolor import colored as cl

plt.style.use('fivethirtyeight')
plt.rcParams['figure.figsize'] = (20,10)

stock = yf.download("UEC", start='2014-01-01')
stock

def get_adx(High, Low, Close, lookback):
    plus_dm = High.diff()
    minus_dm = Low.diff()
    plus_dm[plus_dm < 0] = 0
    minus_dm[minus_dm > 0] = 0
    
    tr1 = pd.DataFrame(High - Low)
    tr2 = pd.DataFrame(abs(High - Close.shift(1)))
    tr3 = pd.DataFrame(abs(Low - Close.shift(1)))
    frames = [tr1, tr2, tr3]
    tr = pd.concat(frames, axis = 1, join = 'inner').max(axis = 1)
    atr = tr.rolling(lookback).mean()
    
    plus_di = 100 * (plus_dm.ewm(alpha = 1/lookback).mean() / atr)
    minus_di = abs(100 * (minus_dm.ewm(alpha = 1/lookback).mean() / atr))
    dx = (abs(plus_di - minus_di) / abs(plus_di + minus_di)) * 100
    adx = ((dx.shift(1) * (lookback - 1)) + dx) / lookback
    adx_smooth = adx.ewm(alpha = 1/lookback).mean()
    return plus_di, minus_di, adx_smooth

stock['plus_di'] = pd.DataFrame(get_adx(stock['High'], stock['Low'], stock['Close'], 7)[0]).rename(columns = {0:'plus_di'})
stock['minus_di'] = pd.DataFrame(get_adx(stock['High'], stock['Low'], stock['Close'], 7)[1]).rename(columns = {0:'minus_di'})
stock['adx'] = pd.DataFrame(get_adx(stock['High'], stock['Low'], stock['Close'], 7)[2]).rename(columns = {0:'adx'})
stock = stock.dropna()
stock.tail()

def get_rsi(close, lookback):
    ret = close.diff()
    up = []
    down = []
    for i in range(len(ret)):
        if ret[i] < 0:
            up.append(0)
            down.append(ret[i])
        else:
            up.append(ret[i])
            down.append(0)
    up_series = pd.Series(up)
    down_series = pd.Series(down).abs()
    up_ewm = up_series.ewm(com = lookback - 1, adjust = False).mean()
    down_ewm = down_series.ewm(com = lookback - 1, adjust = False).mean()
    rs = up_ewm/down_ewm
    rsi = 100 - (100 / (1 + rs))
    rsi_df = pd.DataFrame(rsi).rename(columns = {0:'rsi'}).set_index(close.index)
    rsi_df = rsi_df.dropna()
    return rsi_df[3:]

stock['rsi'] = get_rsi(stock['Close'], 7)
stock = stock.dropna()
stock.tail()

fig, axs = plt.subplots(3, sharex=True)
axs[0].plot(stock['Close'], linewidth = 2, color = '#ff9800')
axs[0].set_title('Stock CLOSING PRICE')
axs[1].plot(stock['plus_di'], color = '#26a69a', label = '+ DI 14', linewidth = 3, alpha = 0.3)
axs[1].plot(stock['minus_di'], color = '#f44336', label = '- DI 14', linewidth = 3, alpha = 0.3)
axs[1].plot(stock['adx'], color = '#2196f3', label = 'ADX 14', linewidth = 3)
axs[1].axhline(25, color = 'grey', linewidth = 2, linestyle = '--')
axs[1].legend()
axs[1].set_title('Stock ADX 14')
axs[2].plot(stock['rsi'], color = '#26a69a', label = 'RSI', linewidth = 3, alpha = 0.3)
axs[2].axhline(30, color = 'grey', linewidth = 2, linestyle = '--')
axs[2].axhline(70, color = 'grey', linewidth = 2, linestyle = '--')
axs[2].legend()
axs[2].set_title('Stock RSI')
plt.show()

def implement_adx_strategy(prices, pdi, ndi, adx, rsi):
    buy_price = []
    sell_price = []
    adx_signal = []
    rsi_signal = []
    signal = 0

    for i in range(len(prices)):
        if adx[i-1] < 25 and adx[i] > 25 and  ndi[i] > pdi[i] and rsi[i] < 30:
            if signal != 1:
                buy_price.append(prices[i])
                sell_price.append(np.nan)
                signal = 1
                adx_signal.append(signal)
                rsi_signal.append(signal)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                adx_signal.append(0)
                rsi_signal.append(0)
        elif adx[i-1] < 25 and adx[i] > 25 and  ndi[i] > pdi[i] and rsi[i] > 70:
            if signal != -1:
                buy_price.append(np.nan)
                sell_price.append(prices[i])
                signal = -1
                adx_signal.append(signal)
                rsi_signal.append(signal)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                adx_signal.append(0)
                rsi_signal.append(0)
        else:
            buy_price.append(np.nan)
            sell_price.append(np.nan)
            adx_signal.append(0)
            rsi_signal.append(0)
            
    return buy_price, sell_price, adx_signal, rsi_signal

buy_price, sell_price, adx_signal, rsi_signal = implement_adx_strategy(stock['Close'], stock['plus_di'], stock['minus_di'], stock['adx'], stock['rsi'])

fig, axs = plt.subplots(3, sharex=True)
axs[0].plot(stock['Close'], linewidth = 3, color = '#ff9800', alpha = 0.6)
axs[0].set_title('STOCK CLOSING PRICE')
axs[0].plot(stock.index, buy_price, marker = '^', color = '#26a69a', markersize = 14, linewidth = 0, label = 'BUY SIGNAL')
axs[0].plot(stock.index, sell_price, marker = 'v', color = '#f44336', markersize = 14, linewidth = 0, label = 'SELL SIGNAL')
axs[1].plot(stock['plus_di'], color = '#26a69a', label = '+ DI 14', linewidth = 3, alpha = 0.3)
axs[1].plot(stock['minus_di'], color = '#f44336', label = '- DI 14', linewidth = 3, alpha = 0.3)
axs[1].plot(stock['adx'], color = '#2196f3', label = 'ADX 14', linewidth = 3)
axs[1].axhline(25, color = 'grey', linewidth = 2, linestyle = '--')
axs[1].legend()
axs[1].set_title('Stock ADX 14')
axs[2].plot(stock['rsi'], color = '#26a69a', label = 'RSI', linewidth = 3, alpha = 0.3)
axs[2].axhline(30, color = 'grey', linewidth = 2, linestyle = '--')
axs[2].axhline(70, color = 'grey', linewidth = 2, linestyle = '--')
axs[2].legend()
axs[2].set_title('Stock RSI')
plt.show()

position = []
for i in range(len(stock['Close'])):
    if adx_signal[i] == 1 and rsi_signal[i] == 1:
        position.append(0)
    else:
        position.append(1)
        
for i in range(len(stock['Close'])):
    if adx_signal[i] == 1 and rsi_signal[i] == 1:
        position[i] = 1
    elif adx_signal[i] == -1 and rsi_signal[i] == -1:
        position[i] = 0
    else:
        position[i] = position[i-1]

close_price = stock['Close']
plus_di = stock['plus_di']
minus_di = stock['minus_di']
adx = stock['adx']
rsi = stock['rsi']
adx_signal = pd.DataFrame(adx_signal).rename(columns = {0:'adx_signal'}).set_index(stock.index)
rsi_signal = pd.DataFrame(rsi_signal).rename(columns = {0:'rsi_signal'}).set_index(stock.index)
position = pd.DataFrame(position).rename(columns = {0:'adx_position'}).set_index(stock.index)

frames = [close_price, plus_di, minus_di, adx, rsi, adx_signal, rsi_signal, position]
strategy = pd.concat(frames, join = 'inner', axis = 1)

stock_ret = pd.DataFrame(np.diff(stock['Close'])).rename(columns = {0:'returns'})
adx_strategy_ret = []

for i in range(len(stock_ret)):
    returns = stock_ret['returns'][i]*strategy['adx_position'][i]
    adx_strategy_ret.append(returns)
    
adx_strategy_ret_df = pd.DataFrame(adx_strategy_ret).rename(columns = {0:'adx_returns'})
investment_value = 100000
number_of_stocks = floor(investment_value/stock['Close'][-1])
adx_investment_ret = []

for i in range(len(adx_strategy_ret_df['adx_returns'])):
    returns = number_of_stocks*adx_strategy_ret_df['adx_returns'][i]
    adx_investment_ret.append(returns)

adx_investment_ret_df = pd.DataFrame(adx_investment_ret).rename(columns = {0:'investment_returns'})
total_investment_ret = round(sum(adx_investment_ret_df['investment_returns']), 2)
profit_percentage = floor((total_investment_ret/investment_value)*100)
print(cl('Profit gained from the ADX strategy by investing $100k in Stock : {}'.format(total_investment_ret), attrs = ['bold']))
print(cl('Profit percentage of the ADX strategy : {}%'.format(profit_percentage), attrs = ['bold']))

def get_benchmark(start_date, investment_value):
    spy = yf.download('SPY', start_date)['Close']
    benchmark = pd.DataFrame(np.diff(spy)).rename(columns = {0:'benchmark_returns'})
    
    investment_value = investment_value
    number_of_stocks = floor(investment_value/spy[-1])
    benchmark_investment_ret = []
    
    for i in range(len(benchmark['benchmark_returns'])):
        returns = number_of_stocks*benchmark['benchmark_returns'][i]
        benchmark_investment_ret.append(returns)

    benchmark_investment_ret_df = pd.DataFrame(benchmark_investment_ret).rename(columns = {0:'investment_returns'})
    return benchmark_investment_ret_df

benchmark = get_benchmark('2018-01-01', 100000)

investment_value = 100000
total_benchmark_investment_ret = round(sum(benchmark['investment_returns']), 2)
benchmark_profit_percentage = floor((total_benchmark_investment_ret/investment_value)*100)
print(cl('Benchmark profit by investing $100k : {}'.format(total_benchmark_investment_ret), attrs = ['bold']))
print(cl('Benchmark Profit percentage : {}%'.format(benchmark_profit_percentage), attrs = ['bold']))
print(cl('ADX Strategy profit is {}% higher than the Benchmark Profit'.format(profit_percentage - benchmark_profit_percentage), attrs = ['bold']))

